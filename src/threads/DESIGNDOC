            +-------------------+
            |       OS 211      |
            |  TASK 1: THREADS  |
            |  DESIGN DOCUMENT  |
            +-------------------+
                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Adam Fiksen <af1410@ic.ac.uk>
Ryan Jackson <rwj10@ic.ac.uk>
Sahil Jain <sdj09@ic.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

To ensure that the highest priority thread waiting for a lock, semaphore or
condition variable wakes up first, we sort the list of waiters using the 
list_sort function in terms of priority in ascending order, so that the
waiting thread with the highest priority is at the end of the list. So when
we call thread_unblock, we pop the thread from the back using list_pop_back,
and unblock it. This is done in sema_up. For condition variables, we sort the
cond->waiters list in terms of priority as well using the list_sort function in
cond_signal, which orders the waiter threads in terms of priority in ascending
order.

By using this method, we ensure that the highest priority thread waiting for a
lock, semaphore or condition variable wakes up first. This is demonstrated
by all the tests passing.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

A potential race in thread_set_priority() is when two different things try
to access the ready_list. To avoid this, the interrupts are disabled. We could
use a lock, but we chose not to as it was a tougher implementation.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We defined two functions, compare_priority_less_equal and compare_priority_less,
which we needed to sort the ready_list. We needed two different ones because
when adding to the ready list for priority scheduling, we needed to perform
round robin scheduling. So for this to happen, we needed to use the
compare_priority_less_equal, so that instead of adding a thread to the end of 
the list when there were other threads of the same priority, it would add it just
before the first thread, which enabled round robin scheduling, as needed in the
specification. By using these two different functions, we did not need to
add any functions in list.c, so the work we had to do was significantly reduced
and the method we implemented was sufficiently efficient.

To sort the list of cond->waiters, we defined compare_sema_less, which compared
the waiters priority wise again, in the same way as compare_priority_less worked. 

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

static void update_recent_cpu (struct thread *t);
//updates thread's recent cpu mlfqs

static void update_load_avg (void);
//updates system load average mlfqs

static void thread_update_priority_mlfqs (struct thread *t);
//updates a threads priority mlfqs

static fixed_point load_avg;
/* current system load average, in fixed point form */

within struct thread:
    int nice;                           /* Thread's niceness */
    fixed_point recent_cpu;      /* CPU time the thread has used stored as fixed point */

typedef struct 
{
	int value;
} fixed_point; 
// A struct used as a wrapper for an int to represent a fixed point number.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0     0   0   0   63  61  59     A
 4     4   0   0   62  61  59     A
 8     8   0   0   61  61  59     B
12     8   4   0   61  60  59     A
16     12  4   0   60  60  59     B
20     12  8   0   60  59  59     A  
24     16  8   0   59  59  59     B
28     16  12  0   59  58  59     C
32     16  12  4   59  58  58     A
36     20  12  4   58  58  58     B

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behaviour of your scheduler?

When multiple threads have the same priority, it is unclear which thread should
run first. We've implemented it so that the previously running thread will be
the last of these threads to be called.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

there is quite a lot of computation run inside thread_tick() which is called in an
interrupt context so performance could be degraded by this - other interrupts
could get missed here.


---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the task, how might you choose to
>> refine or improve your design?

as stated above, a lot of computation occurs in the interrupt context. Given
more time I'd try and move more of this code outside the interrupt. One advantage
of our code is the use of conditionals based on thread_mlfqs to minimise computation
if we aren't going to use the advanced scheduler.

>> C6: The assignment explains arithmetic for fixed-point mathematics in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point mathematics, that is, an abstract
>> data type and/or a set of functions or macros to manipulate
>> fixed-point numbers, why did you do so?  If not, why not?

The fixed_point struct provided a convenient wrapper for the fixed point integers.
It took up a tiny amount of extra memory to implement, but provided crucial type
safety on performing arithmetic with these numbers. Although the program has
no use for this style of int outside of the priority calcualtions etc. (we can
assume that the programmer - i.e. us - knows whether the 'int' they are dealing 
with is a fixed point number or an actual number, it is alot safer to use the 
fixed_point wrapper. We also used the macro for FRACTION_SIZE to ensure the 
correct value for converting between fixed point and int was used in every
function. 

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining tasks?

>> Any other comments?

